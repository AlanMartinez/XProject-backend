// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XProject.Infrastructure;

#nullable disable

namespace XProject.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220420012806_addErrors")]
    partial class addErrors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("XProject.Core.Entities.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Binding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationDn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginDn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointOfSaleId")
                        .HasColumnType("int");

                    b.Property<int>("PointOfSaleId1")
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlWS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlWsaa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PointOfSaleId");

                    b.HasIndex("PointOfSaleId1");

                    b.ToTable("Connection", (string)null);
                });

            modelBuilder.Entity("XProject.Core.Entities.Cuit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MonthlyLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cuit", (string)null);
                });

            modelBuilder.Entity("XProject.Core.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CuitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Errors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuitId");

                    b.ToTable("Operation", (string)null);
                });

            modelBuilder.Entity("XProject.Core.Entities.PointOfSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CuitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PointOfSaleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CuitId");

                    b.ToTable("PointOfSale", (string)null);
                });

            modelBuilder.Entity("XProject.Core.Entities.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Security", (string)null);
                });

            modelBuilder.Entity("XProject.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SecurityId")
                        .IsUnique()
                        .HasFilter("[SecurityId] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("XProject.Core.ValueObjects.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("XProject.Core.ValueObjects.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("XProject.Core.Entities.Connection", b =>
                {
                    b.HasOne("XProject.Core.Entities.PointOfSale", null)
                        .WithMany("Connections")
                        .HasForeignKey("PointOfSaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("XProject.Core.Entities.PointOfSale", "PointOfSale")
                        .WithMany()
                        .HasForeignKey("PointOfSaleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointOfSale");
                });

            modelBuilder.Entity("XProject.Core.Entities.Cuit", b =>
                {
                    b.HasOne("XProject.Core.ValueObjects.Address", "Address")
                        .WithOne()
                        .HasForeignKey("XProject.Core.Entities.Cuit", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XProject.Core.ValueObjects.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XProject.Core.Entities.User", "User")
                        .WithOne("Cuit")
                        .HasForeignKey("XProject.Core.Entities.Cuit", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XProject.Core.Entities.Operation", b =>
                {
                    b.HasOne("XProject.Core.Entities.Cuit", "Cuit")
                        .WithMany("Operations")
                        .HasForeignKey("CuitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cuit");
                });

            modelBuilder.Entity("XProject.Core.Entities.PointOfSale", b =>
                {
                    b.HasOne("XProject.Core.ValueObjects.Address", "Address")
                        .WithOne()
                        .HasForeignKey("XProject.Core.Entities.PointOfSale", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XProject.Core.Entities.Cuit", "Cuit")
                        .WithMany("PointsOfSale")
                        .HasForeignKey("CuitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Cuit");
                });

            modelBuilder.Entity("XProject.Core.Entities.User", b =>
                {
                    b.HasOne("XProject.Core.Entities.Security", "Security")
                        .WithOne("User")
                        .HasForeignKey("XProject.Core.Entities.User", "SecurityId");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("XProject.Core.Entities.Cuit", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("PointsOfSale");
                });

            modelBuilder.Entity("XProject.Core.Entities.PointOfSale", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("XProject.Core.Entities.Security", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("XProject.Core.Entities.User", b =>
                {
                    b.Navigation("Cuit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
